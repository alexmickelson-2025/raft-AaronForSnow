@page "/"
@rendermode InteractiveServer
@using RaftClassLib

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.
<div class="flex-column">
	<div calss="flex-row">

		<button @onclick='startSimulation'>start</button>
		<div>

			<label for="speed">
				Election timeout between @(FormatMilliSeconds(150 * ElectionTimer)) and @(FormatMilliSeconds(300 *
				ElectionTimer)) seconds


				<input type="range" id="speed" name="speed" min="1" max="150" @bind:event="oninput"
				@bind=ElectionTimer @onchange=setElectionTimer />
			</label>
		</div>
		<div>

			<label for="speed">
				Network Delay: @(FormatMilliSeconds(NetworkDelay)) seconds


				<input type="range" id="speed" name="speed" min="10" max="10000" @bind:event="oninput"
				@bind=NetworkDelay @onchange=setNetworkDelay />
			</label>
		</div>
	</div>
</div>
<div style="display: flex; flex-wrap: wrap; gap: 20px;">
	@foreach (var node in nodes)
	{
		<div style="border: 1px solid #ccc; padding: 10px; width: 200px;">
			<button @onclick='async () => { await SwapSimState(node);}'>
				@if (node.IsLive)
				{
					<>"Stop"</>
				}
				else
				{
					<>"Start"</>
				}

			</button>
			<ul style="list-style-type: none; padding-left: 0;">
				<li><label>ID: </label>@node.ID</li>
				<li><label>Term: </label>@node.Term</li>
				<li><label>State: </label>@node.State</li>
				<li><label>Election Timeout: </label>@node.ElectionTimer.Interval ms</li>
				<li><label>Leader ID: </label>@node.LeaderId</li>
				@* @foreach (var vote in node.Votes)
				{
					<div>Voter Id:  @vote.VoterId</div>
					<div>Was Positive: @vote.PositiveVote</div>
				} *@
			</ul>
		</div>
	}
</div>

@code {
	List<SimulationNode> nodes = [];
	int NetworkDelay = 10;
	int ElectionTimer = 1;
	Timer? timer;
	async Task startSimulation(){
		var node1 = new ServerAaron(1);
		var node2 = new ServerAaron(2);
		var node3 = new ServerAaron(3);
		node1.State = ServerState.Leader;
		var simulation1 = new SimulationNode(node1);
		var simulaiton2 = new SimulationNode(node2);
		var simulation3 = new SimulationNode(node3);

		node1.OtherServers = [simulaiton2, simulation3];
		node2.OtherServers = [simulation1, simulation3];
		node3.OtherServers = [simulaiton2, simulation1];

		nodes = [simulation1, simulaiton2, simulation3];
		setNetworkDelay();
		foreach (var node in nodes)
		{
			node.nextIndexes = new List<int>() {0,0};
			await node.StartSimAsync();
		}
		timer = new Timer(_ =>
		{
			InvokeAsync(StateHasChanged);
		}, null, 0, 200);
	}
	void setNetworkDelay()
	{
		foreach (var node in nodes)
		{
			node.NetworkDelayModifier = this.NetworkDelay;
		}
	}
	async Task setElectionTimer()
	{
		await startSimulation();
		foreach (var node in nodes)
		{
			node.ElectionTimeoutMultiplier = this.ElectionTimer;
		}
		await Task.CompletedTask;
	}
	public static string FormatMilliSeconds(double milliSeconds)
	{
		return $"{milliSeconds / 1000.0:F1}";
	}
	async Task SwapSimState(SimulationNode node){

		if (node.IsLive ){
			await node.StopAsync();
		}
		else {
			await node.StartSimAsync();
		}
	}
}