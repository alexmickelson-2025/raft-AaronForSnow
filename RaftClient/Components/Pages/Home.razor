@page "/"
@rendermode InteractiveServer
@using RaftClassLib
@using System.Collections.Concurrent


<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>
<div><label>Times Timer Ran: </label>@countTimer</div>
@foreach ( var s in Urls){
    <div>@s</div>
}
@foreach (var node in data){
    <ul>
        <button @onclick='async () => { await SwapSimState(node.Key, node.Value);}'>
            @if (node.Value.Status)
            {
                <>"Stop"</>
            }
            else
            {
                <>"Start"</>
            }

        </button>
        <li><label>Id: </label>@node.Value.Id</li>
        <li><label>Election timeout: </label>@node.Value.ElectionTimeout</li>
        <li><label>Server state: </label>@node.Value.State</li>
        <li><label>Is Alive: </label>@node.Value.Status</li>
        <li><label>Leader Id: </label>@node.Value.CurrentTermLeader</li>
        <li><label>CommitedEntry Index: </label>@node.Value.CommittedEntryIndex</li>
        <li><label>Log: </label>
            <ul>
                @foreach(var entry in node.Value.Log){
                    <li>@entry</li>
                }
            </ul>
        </li>
    </ul>
}
@code {
    HttpClient http = new HttpClient();
    string[] Urls = Environment.GetEnvironmentVariable("NODE_URLS")?.Split(',') ?? [];
    ConcurrentDictionary<string,NodeData> data = new();
    int countTimer = 0;

    protected override void OnInitialized(){
        Timer timer= new Timer(async _ => 
        {
            await Task.WhenAll(
                Urls.Select(async url => 
                {
                    try 
                    {
                        var nodeData = await http.GetFromJsonAsync<NodeData>(url + "/nodeData");
                        if (nodeData != null)
                        {
                            data[url] = nodeData;
                        }
                        else
                            Console.WriteLine("did not get data for " + url);        
                    }
                    catch (HttpRequestException)
                    {
                        Console.WriteLine($"node {url} is down");
                        data.TryRemove(url, out var removedNodeData);
                    }
                }
            ).ToArray());
            countTimer++;
            await InvokeAsync(StateHasChanged);
        }, null,0, 200);
    }

    async Task SwapSimState(string Url, NodeData node)
    {
        try {

            if (node.Status)
            {
                await http.PostAsJsonAsync(Url + "/StopAsync", "");
            }
            else
            {
                await http.PostAsJsonAsync(Url + "/StartSim", "");
            }
        }
        catch (HttpRequestException)
        {
            Console.WriteLine(Url, " Failed to respond to Swap State Call");
        }
    }
    
}
